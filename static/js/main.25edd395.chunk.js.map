{"version":3,"sources":["components/Bar.tsx","components/utils.ts","components/EpisodeSlider.tsx","components/style/theme.ts","components/Cloud.tsx","components/SearchStoriesModal.tsx","components/App.tsx","serviceWorker.js","index.tsx"],"names":["Bar","AppBar","position","Toolbar","Typography","variant","stories","flatten_stories","reduce","s","x","episode_num","length","margeWords","y","word_count_map","Map","countWords","words","forEach","count","get","word","set","num","Array","from","entries","map","getEpisodeString","ep","rest_ep","current_season","getRangeFilterdFlattenStories","range","slice","to","SliderLabel","value","open","children","content","useMemo","Tooltip","placement","title","EpisodeSliderRoot","styled","div","EpisodeSlider","max_ep","setEpisodeRange","onChange","throttle","_","v","Slider","max","valueLabelDisplay","aria-labelledby","ValueLabelComponent","theme","createMuiTheme","palette","primary","main","red","secondary","orange","color_scale","keys","mix","CloudRoot","Cloud","episode_range","onWordClick","text","react_wordcloud","maxWords","callbacks","options","fontSizes","colors","rotations","fontFamily","fontWeight","HighlightText","query","HighlightTextRoot","dangerouslySetInnerHTML","__html","replace","RegExp","section","SearchStories","SearchStoriesRoot","i","index","story","filter","indexOf","SearchStoriesModal","onClose","Dialog","App","useState","selected_word","setSelectedWord","useCallback","ThemeProvider","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.25edd395.chunk.js","sourcesContent":["import React, { FC } from \"react\";\n\nimport AppBar from \"@material-ui/core/AppBar\";\nimport Toolbar from \"@material-ui/core/Toolbar\";\nimport Typography from \"@material-ui/core/Typography\";\n\nconst Bar: FC<{}> = () => (\n  <AppBar position=\"sticky\">\n    <Toolbar>\n      <Typography variant=\"h5\">とある科学の超電磁砲 Word Cloud</Typography>\n    </Toolbar>\n  </AppBar>\n);\n\nexport default Bar;\n","import { Stories, WordInfo, EpisodeRange, Story } from \"../types\";\nimport stories_json from \"../analyser/stories.json\";\n\nexport const stories: Stories = stories_json;\nexport const flatten_stories = stories.reduce((s, x) => [...s, ...x]);\nexport const episode_num = flatten_stories.length;\n\nexport const margeWords = (x: WordInfo[], y: WordInfo[]): WordInfo[] => {\n  const word_count_map: Map<string, number> = new Map();\n  const countWords = (words: WordInfo[]): void =>\n    words.forEach((x) => {\n      const count = word_count_map.get(x.word);\n      word_count_map.set(x.word, (count ? count : 0) + x.num);\n    });\n\n  countWords(x);\n  countWords(y);\n\n  return Array.from(word_count_map.entries()).map((x) => ({\n    word: x[0],\n    num: x[1],\n  }));\n};\n\nexport const getEpisodeString = (ep: number): string => {\n  let rest_ep = ep;\n  let current_season = 0;\n  while (rest_ep >= stories[current_season].length) {\n    rest_ep -= stories[current_season].length;\n    current_season++;\n  }\n\n  return `season${current_season + 1} ep${rest_ep + 1}`;\n};\n\nexport const getRangeFilterdFlattenStories = (range: EpisodeRange): Story[] =>\n  flatten_stories.slice(range.from, range.to + 1);\n","import React, { FC, useMemo } from \"react\";\nimport { throttle } from \"throttle-debounce\";\nimport styled from \"@emotion/styled\";\nimport { EpisodeRange } from \"../types\";\nimport Slider from \"@material-ui/core/Slider\";\nimport Tooltip from \"@material-ui/core/Tooltip\";\n\nimport { getEpisodeString } from \"./utils\";\n\nconst SliderLabel: FC<{\n  value: number;\n  open: boolean;\n  children: JSX.Element;\n}> = ({ value, open, children }) => {\n  const content = useMemo(() => getEpisodeString(value), [value]);\n\n  return (\n    <Tooltip open={open} placement=\"top\" title={content}>\n      {children}\n    </Tooltip>\n  );\n};\n\nconst EpisodeSlider: FC<{\n  range: EpisodeRange;\n  max_ep: number;\n  setEpisodeRange: (range: EpisodeRange) => void;\n}> = ({ range, max_ep, setEpisodeRange }) => {\n  const value = useMemo(() => [range.from, range.to], [range.from, range.to]);\n  const onChange = useMemo(\n    () =>\n      throttle<(_: any, v: number | number[]) => void>(100, (_, v) => {\n        v instanceof Array &&\n          setEpisodeRange({\n            from: v[0],\n            to: v[1],\n          });\n      }),\n    [setEpisodeRange]\n  );\n\n  return (\n    <EpisodeSliderRoot>\n      <Slider\n        value={value}\n        onChange={onChange}\n        max={max_ep}\n        valueLabelDisplay=\"auto\"\n        aria-labelledby=\"range-slider\"\n        ValueLabelComponent={SliderLabel}\n      />\n    </EpisodeSliderRoot>\n  );\n};\nconst EpisodeSliderRoot = styled.div`\n  position: fixed;\n  left: 50%;\n  bottom: 0;\n  width: 90%;\n  max-width: 700px;\n  transform: translateX(-50%);\n`;\n\nexport default EpisodeSlider;\n","import { createMuiTheme } from \"@material-ui/core/styles\";\nimport red from \"@material-ui/core/colors/red\";\nimport orange from \"@material-ui/core/colors/orange\";\n\nexport const theme = createMuiTheme({\n  palette: {\n    primary: {\n      main: red[900],\n    },\n    secondary: {\n      main: orange[500],\n    },\n  },\n});\n","import React, { FC, useMemo } from \"react\";\nimport ReactWordcloud from \"react-wordcloud\";\nimport mix from \"mix-color\";\nimport styled from \"@emotion/styled\";\nimport { theme } from \"./style/theme\";\n\nimport { EpisodeRange } from \"../types\";\nimport { margeWords, getRangeFilterdFlattenStories } from \"./utils\";\n\nconst color_scale = [...Array(10).keys()].map((x) =>\n  mix(theme.palette.secondary.main, theme.palette.primary.main, x / 10)\n);\n\nconst Cloud: FC<{\n  episode_range: EpisodeRange;\n  onWordClick?: (word: string) => void;\n}> = ({ episode_range, onWordClick }) => {\n  const words: { text: string; value: number }[] = useMemo(\n    () =>\n      getRangeFilterdFlattenStories(episode_range)\n        .map((x) => x.words)\n        .reduce(margeWords)\n        .map((x) => ({ text: x.word, value: x.num })),\n    [episode_range]\n  );\n\n  const react_wordcloud = useMemo(\n    () => (\n      <ReactWordcloud\n        words={words}\n        maxWords={150}\n        callbacks={{\n          onWordClick: (word) => (onWordClick ? onWordClick(word.text) : null),\n        }}\n        options={{\n          fontSizes: [18, 72],\n          colors: color_scale,\n          rotations: 0,\n          fontFamily: \"serif\",\n          fontWeight: \"bold\",\n        }}\n      />\n    ),\n    [words, onWordClick]\n  );\n\n  return <CloudRoot>{react_wordcloud}</CloudRoot>;\n};\nconst CloudRoot = styled.div`\n  width: 100%;\n  height: calc(100vh - 150px);\n`;\n\nexport default Cloud;\n","import React, { FC } from \"react\";\nimport Dialog from \"@material-ui/core/Dialog\";\nimport Typography from \"@material-ui/core/Typography\";\n\nimport { EpisodeRange } from \"../types\";\nimport { getEpisodeString, getRangeFilterdFlattenStories } from \"./utils\";\n\nimport { theme } from \"./style/theme\";\nimport styled from \"@emotion/styled\";\n\nconst HighlightText: FC<{\n  query: string;\n  text: string;\n}> = ({ query, text }) => (\n  <HighlightTextRoot\n    dangerouslySetInnerHTML={{\n      __html: text.replace(new RegExp(`${query}`, \"g\"), `<em>${query}</em>`),\n    }}\n  />\n);\nconst HighlightTextRoot = styled.section`\n  em {\n    color: ${theme.palette.primary.main};\n    font-style: normal;\n    font-weight: bold;\n  }\n`;\n\nconst SearchStories: FC<{\n  query: string;\n  episode_range: EpisodeRange;\n}> = ({ query, episode_range }) => {\n  return (\n    <SearchStoriesRoot>\n      {getRangeFilterdFlattenStories(episode_range)\n        .map((x, i) => ({ index: i, story: x }))\n        .filter((x) => x.story.text.indexOf(query) !== -1)\n        .map((x) => (\n          <article>\n            <Typography variant=\"h6\">\n              {getEpisodeString(episode_range.from + x.index)}\n            </Typography>\n            <HighlightText query={query} text={x.story.text} />\n          </article>\n        ))}\n    </SearchStoriesRoot>\n  );\n};\nconst SearchStoriesRoot = styled.div`\n  padding: 20px;\n\n  article:not(:first-of-type) h6 {\n    margin-top: 20px;\n  }\n`;\n\nconst SearchStoriesModal: FC<{\n  query: string;\n  episode_range: EpisodeRange;\n  open: boolean;\n  onClose?: () => void;\n}> = ({ query, episode_range, open, onClose }) => {\n  return (\n    <Dialog onClose={onClose} aria-labelledby=\"simple-dialog-title\" open={open}>\n      <SearchStories query={query} episode_range={episode_range} />\n    </Dialog>\n  );\n};\n\nexport default SearchStoriesModal;\n","import React, { FC, useState, useCallback } from \"react\";\nimport { ThemeProvider } from \"@material-ui/core/styles\";\n\nimport Bar from \"./Bar\";\nimport EpisodeSlider from \"./EpisodeSlider\";\nimport Cloud from \"./Cloud\";\nimport SearchStoriesModal from \"./SearchStoriesModal\";\n\nimport { theme } from \"./style/theme\";\nimport { EpisodeRange } from \"../types\";\nimport { episode_num } from \"./utils\";\n\nconst App: FC = () => {\n  const [episode_range, setEpisodeRange] = useState<EpisodeRange>({\n    from: 0,\n    to: episode_num - 1,\n  });\n  const [selected_word, setSelectedWord] = useState<string | null>(null);\n\n  return (\n    <>\n      <Bar />\n      <Cloud\n        episode_range={episode_range}\n        onWordClick={useCallback((word) => setSelectedWord(word), [])}\n      />\n      <EpisodeSlider\n        range={episode_range}\n        max_ep={episode_num - 1}\n        setEpisodeRange={setEpisodeRange}\n      />\n      <SearchStoriesModal\n        query={selected_word ? selected_word : \"\\0\"}\n        episode_range={episode_range}\n        open={selected_word !== null}\n        onClose={useCallback(() => setSelectedWord(null), [])}\n      />\n    </>\n  );\n};\n\nexport default () => (\n  <ThemeProvider theme={theme}>\n    <App />\n  </ThemeProvider>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./components/App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}